Basics of software testing 

SDLC - Agile-scrum, waterfall 
Type of testing - smoke, regression, sanity, UAT 
web based applicatoni testing 

Frontend - UI - GUI - Mobile 
Functionality of the application - Functional testing 

end-user 

60/70 functional testing - manual , automation testing 
java, selenium, TestNG, cucumber - maven, git/github

devops people - jenkins, bamboo

30/50 non-functional testing 

this is not functionality an user doesnt use directly 

front-end  - web UI , mobile UI 

Backend - database, web service/api 

database testing 
web service/api testing 

performance testing
security testing - penatration testing 

database : where data of the application is stored 

relational database management system - rdms

query language - 

SQL - structured query language 

2 tier application - 

front end - database 

3 tiers application - 

front-end - web api/web service - database  

database - schema 


columns - field 
rows - record or entry 


CRUD - 

create new data

read existing data - 90 

update existing data

delete existing data 




SQL - query language - how to get data from a database 

reading - 

Select columnNames from tablename where filteringrecordorentry 

And condition - all condition has to be true
or condition - one condition has to be true 





find out a customer who is from fairfax, bought more than 30 products and less than 27 years age 

select customername from customertable 
where city=fairfax and numerofproducts>30 and age < 27


order by - can sequence data in 2 ways

alphabatical order - string 
ascending or descening order - number

inserting data in the database - 

FIFO - 

aggregate functions - 

min max count avg sum

Structure of any database table: 

datatype - 
constraints - 

char(size) - char(20) - must 20 characters 
varchar(size) - varchar(20)- maximum character is 20 
int - numbers 
Text  - 65K characters 
blob - storing pics 

sql query for creating database: 

Create customers 
(

firstname varchar(50) Not null
lastname varchar(40) Not Null 
address  Text 
age          int  check age>18
SSN        char(9) primary key
pic     blob  default locationofthepic
email varchar(50) Not Null, Unique 
cid int   Not Null 
Foreign key (CID) References products(pid) 
Foreign key (SSN) References creditcardinfo(SSN) 


)


50 tables - 

products - productname, price, pid 
credit card info - ssn 


constraints: 

NOT NULL - it can not be null 
unique - data has to be unique in the column
primary key - Not null + unique 
Foreign key - relationship with other table 
Check - to create a specific condition 
Default - for no value entered 







CRUD - create read update delete 

read - 90 percent operation 

select column from table where filtering 

which column to see
from which table
filtering required 

the goal of using a primary key is to make sure there is 
one unique identification for each record or entry 

not null + unique 












customer information table - name, address, phone number, cid, ssn, email
credit card information table - card no, expire date, cid
product information table - product name, buyer name , cid


name  card no  product name cid 


joins - 

select columnname from tablename where filtering

SELECT customer.Name, products.products
FROM customer INNER JOIN Products
ON customer.cid = products.pid
where customer.email='mike@gmail.com';

find out how much john spent on buying products 
price - sum
name - 

Select customer.name, SUM(customer.price)
FROM customer INNER JOIN Products
ON customer.cid = products.pid
where customer.email='john@gmail.com';

--------------------------------------------------------------------------------
Select customer.name, COUNT(products.price)
FROM customer INNER JOIN Products
ON customer.cid = products.pid
where customer.email='john@gmail.com';

------------------------------------------------------------------------
how many products each person bought and total spent for 
each person 

Select customer.name, COUNT(products.price), SUM (product.price) 
FROM customer INNER JOIN Products
ON customer.cid = products.pid; 

-----------------------------------------------------------------------------------

inner join - only the matching data from both table

left join - all data from left table and only matching data 
from right table

right join - all data from right table and only matching data 
from left table


full outer join - all data from all tables


------------------------------------------------------------------------------------------
create - database, table, data 
read - 90 percent of operation 
update - table, data
delete -  table, data 


create db1; 

INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

----------------------------------------------------------------------------------------

updating table 

add or modify columns, columns structure 

customer - age 

alter table customer add age int NOT NULL
alter table customer drop age 
alter table customer modify age int check age>18 NOT NULL

deleting table 

drop table customer - the table will be fully deleted from the 
database 
truncate table customer - only for deleting data the table exists 

------------------------------------------------------------------------------------

updating data 

update customer set cid = 107, city='arlington' where name='mike'

deleting 

delete from customer where cid=104 

-------------------------------------------------------------------------------------

what is your role on SQL: 

backend - database testing 
extracting data from the database 

testing database : 

data mapping : mapping the front-end user interface with 
back-end tables 

data integrity : constraint testing - 

data validation: validate data in the front and back-end 

what you did in datbase? 

oracle
ms sql server - 
my sql - 

setting up database: 

1. ask you to install an database workbench 

toad

2. vpn - 
192.167.23.234

my sql workbench - oracle database 


cloud environment - AWS 

database - 150 sql queries - 

api testing - 200 requests 

















jobs@agile1tech.com 






























